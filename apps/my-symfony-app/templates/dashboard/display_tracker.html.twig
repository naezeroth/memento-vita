{% extends 'base_1.html.twig' %}

{%  block main %}
{#    {{ dump(results) }}#}

{#    <div class="card">#}
        <h3 class="card-header" id="monthAndYear">
        </h3>
{#        <button onclick="CreateTable()">Extend</button>#}
        <table class="table">
            <thead id="mytableheader">
{#                <tr>#}
{#                    <th id="showYear">YEAR</th>#}
{#                    <th id="showMonth">MONTH</th>#}
{#                    <th colspan="31">JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC</th>#}
{#                </tr>#}
            </thead>
            <tbody id="mytablecontent">
{#            {% set r = results|batch(3) %}#}
{#            {% dump(results) %}#}
            {% dump(results|json_encode()) %}
            {% for r in results %}
{#                {% array_push(recurrenceArray, r.getRecurrenceCollection()) %}#}
{#                {% dump(r) %}#}
{#                {% dump(r|json_encode()) %}#}
{#                {% dump(r.getRecurrenceCollection()) %}#}
{#                {% dump(r.getName()) %}#}
{#                {% dump(r.getDone()) %}#}
            {% endfor %}
            {% dump(recurrenceResult) %}
{#            {% dump(r) %}#}
{#                {% for atom in r %}#}
{#                    {% dump(atom) %}#}
{#                    {% for entry in atom %}#}
{#                        {%  dump(entry) %}#}
{#                        <tr>#}
{#                            <td>{{ entry.name }}</td>#}
{#                        </tr>#}
{#                    {% endfor %}#}
{#                {% endfor %}#}
            </tbody>
        </table>
{#    </div>#}

    <div class="form-inline">
        <button class="btn btn-outline-primary col-sm-6" id="previous" onclick="previous()">Previous</button>
        <button class="btn btn-outline-primary col-sm-6" id="next" onclick="next()">Next</button>
    </div>
    <br/>

    <form class="form-inline">
        <label class="lead mr-2 ml-2" for="month">Jump To: </label>
        <select class="form-control col-sm-4" name="month" id="month" onchange="jump()">
            <option value=0>Jan</option>
            <option value=1>Feb</option>
            <option value=2>Mar</option>
            <option value=3>Apr</option>
            <option value=4>May</option>
            <option value=5>Jun</option>
            <option value=6>Jul</option>
            <option value=7>Aug</option>
            <option value=8>Sep</option>
            <option value=9>Oct</option>
            <option value=10>Nov</option>
            <option value=11>Dec</option>
        </select>

        <label for="year"></label>
        <select class="form-control col-sm-4" name="year" id="year" onchange="jump()">
            <option value=2020>2020</option>
            <option value=2021>2021</option>
            <option value=2022>2022</option>
            <option value=2023>2023</option>
            <option value=2024>2024</option>
            <option value=2025>2025</option>
            <option value=2026>2026</option>
            <option value=2027>2027</option>
            <option value=2028>2028</option>
            <option value=2029>2029</option>
            <option value=2030>2030</option>
        </select>
    </form>

    {% set r = results|batch(3) %}
    {% for atom in r %}
        <div class="card-deck">
            {% for entry in atom %}
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">{{ entry.name }}</h5>
                        <p class="card-text"> {{  entry.description }} </p>
                        <p class="card-text"> For goal: {{  entry.goal.name }} </p>
                        {{ dump(entry.count) }}
                        {% for i in range(0,entry.count-1) %}
                            <p class="card-text"> For date: {{ entry.getRecurrenceCollection[i] |date('Y-m-d')}}
                            {% if entry.done[i] == 1 %}
                                is done ✅
                            {% else %}
                                is not done ❌
                            {% endif %}
                            </p>
                        {% endfor %}
                        <a href="{{ path('edit_habit', {'id': entry.getId}) }}"><button class="btn btn-primary" >Edit Habit</button></a>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">Last updated 3 mins ago</small>
                    </div>
                </div>
            {% endfor %}
        </div>
        <br>
    {% endfor %}
{#    <a href="{{ path('add_habit') }}"><button class="btn btn-success" >Add Habit</button></a>#}

{%  endblock %}

{% block javascripts %}
    <script>
        habits = {{ results|json_encode|raw }};
        today = new Date();
        currentMonth = today.getMonth();
        currentYear = today.getFullYear();
        selectYear = $('#year'); //document.getElementById("year");
        selectMonth = $('#month'); //document.getElementById("month");
        dateObject = {};

        months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        monthAndYear = $('#monthAndYear'); //document.getElementById("monthAndYear");

        $(() => {
            {#var habits = {{ results|json_encode|raw }}; //Don't use data = $('.js-user-rating').data('entryResults')#}
            var recurrences = {{ recurrenceResult|json_encode|raw }}
                console.log(habits);
            // console.log(habits[0].name);
            // console.log(recurrences[0][0].date);
            // console.log(recurrences);

            recurrences.forEach((item, idx) => { //Populates dateObject {'year':{'month': [date, date2 etc.]}}
                //idx corresponds with habit order
                if(!checkNested(dateObject, idx)){
                    dateObject[idx] = {};
                }
                item.forEach((date) =>{
                    var d = new Date(date.date);
                    // console.log(d);
                    // console.log(checkNested(dateObject, idx, d.getFullYear().toString(), d.getMonth().toString()));
                    if(!checkNested(dateObject, idx, d.getFullYear().toString())){
                        //Year does not exist
                        dateObject[idx][d.getFullYear().toString()] = {};
                    }
                    if(!checkNested(dateObject, idx, d.getFullYear().toString(), d.getMonth().toString())){
                        // console.log("false");
                        // console.log(d.getMonth().toString());
                        dateObject[idx][d.getFullYear().toString()][d.getMonth().toString()] = []
                    }
                    dateObject[idx][d.getFullYear().toString()][d.getMonth().toString()].push(d);
                    // console.log(dateObject);
                });
                // console.log(new Date(item))
            });

            // var date = new Date(recurrences[0][0].date);
            // console.log(date);
            showCalendar(currentMonth, currentYear);
            // console.log(date.getTime());
            // console.log(today.getTime());
            showHabits(currentMonth, currentYear);

            var test = {level1:{level2:{level3:'level3'}} };

            console.log(checkNested(test, 'level1', 'level2', 'level3')); // true
            console.log(checkNested(test, 'level1', 'level2', 'foo')); // false
        });

        function next() {
            currentYear = (currentMonth === 11) ? currentYear + 1 : currentYear;
            currentMonth = (currentMonth + 1) % 12;
            showCalendar(currentMonth, currentYear);
        }

        function previous() {
            currentYear = (currentMonth === 0) ? currentYear - 1 : currentYear;
            currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;
            showCalendar(currentMonth, currentYear);
        }

        function jump() {
            currentYear = parseInt(selectYear.value);
            currentMonth = parseInt(selectMonth.value);
            showCalendar(currentMonth, currentYear);
        }
        function showCalendar(month, year) {
            let numOfDays = daysInMonth(month, year);

            tbl = $('#mytableheader'); //  document.getElementById("calendar-body"); // body of the calendar]

            var prevDates = document.getElementById("mytableheader");   // Get the element with id="mytableheader"
            prevDates.removeChild(prevDates.childNodes[0]);

            $('#monthAndYear').text(months[month] + " " + year);

            selectYear.value = year;
            selectMonth.value = month;

            // creating all cells
            let date = 1;
            // for (let i = 0; i < numOfDays; i++) {
                // creates a table row
            let row = document.createElement("tr");

            cell = document.createElement("th");
            cellText = document.createTextNode("Habit");
            cell.appendChild(cellText);
            row.appendChild(cell);
            // console.log(numOfDays);
            //creating individual cells, filing them up with data.
            for (let j = 0; j < numOfDays; j++) {
                cell = document.createElement("th");
                cellText = document.createTextNode(date);
                if (date === today.getDate() && year === today.getFullYear() && month === today.getMonth()) {
                    cell.classList.add("bg-info");
                } // color today's date
                cell.appendChild(cellText);
                row.appendChild(cell);
                date++;
            }
            console.log(row);
            tbl.append(row); // appending each row into calendar body.
        }

        function showHabits(month, year){
            let numOfDays = daysInMonth(month, year);
            tbl = $('#mytablecontent');
            let row = document.createElement("tr");
            cell = document.createElement("td");

            for (var key in dateObject) { //Loop through each habit
                if(!dateObject.hasOwnProperty(key)) continue;

                var obj = dateObject[key];
                // console.log(habits[key].name);
                cell = document.createElement("td");
                cellText = document.createTextNode(habits[key].name);

                cell.appendChild(cellText);
                row.appendChild(cell);

                var dateExists = {};

                //Compare currentMonth currentYear with dateObject year date - if entries populate else don't.

                // console.log("object is", obj);

                if(checkNested(obj, currentYear, currentMonth)){ //Check if currentYear and currentMonth is a key
                    obj[currentYear][currentMonth].forEach((date, idx) => {
                        dateExists[date.getDate()] = idx;
                        // console.log("test test", date); //Works!
                        // cell = document.createElement("th");
                        // cellText = document.createTextNode(date.getDate().toString());
                        // cell.appendChild(cellText);
                        // row.appendChild(cell);
                    });
                    console.log(dateExists);
                    console.log(numOfDays);
                    // console.log("test");
                    // for(var i = 0; i < numOfDays; i++){
                    //     console.log(i);
                    // }
                    for (let j = 0; j < numOfDays; j++) {
                        console.log("test");
                        cell = document.createElement("td");
                        cellText = document.createTextNode("");
                        if (dateExists.hasOwnProperty(j)) {
                            if(habits[key].done[dateExists[j]]){
                                cellText = document.createTextNode("✅");
                            }
                            else{
                                cellText = document.createTextNode("❌");
                            }
                            // cell.classList.add("bg-info");
                        } // color today's date
                        else{
                            cell.classList.add("bg-secondary");
                        }
                        cell.appendChild(cellText);
                        row.appendChild(cell);
                        console.log(row);
                    }

                }
                tbl.append(row);
                row = document.createElement("tr"); //Create new row
            }
            // tbl.append(row);

            //for each habit loop over see if a match in month, then populate X for dates - create row nonetheless
        }
        // check how many days in a month code from https://dzone.com/articles/determining-number-days-month
        function daysInMonth(iMonth, iYear) {
            return 32 - new Date(iYear, iMonth, 32).getDate();
        }

        function checkNested(obj, level,  ...rest) {
            if (obj === undefined) return false
            if (rest.length == 0 && obj.hasOwnProperty(level)) return true
            return checkNested(obj[level], ...rest)
        }

    </script>
{% endblock %}
