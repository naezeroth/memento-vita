{% extends 'base_1.html.twig' %}

{%  block main %}
    <div id="ajax-results"></div>
    <h3 class="card-header" id="monthAndYear"></h3>
{#        <button onclick="CreateTable()">Extend</button>#}
    <button class="btn btn-outline-primary col-sm-6" id="previous" onclick="toggleHalfMonth()">Toggle Month</button>
    <table class="table">
        <thead id="mytableheader">
{#            Will have HABIT, and all dates of that month#}
        </thead>
        <tbody id="mytablecontent">
{#            Will have HABIT NAME and then ticks/crosses for each recurrence date#}
        </tbody>
    </table>

    <div class="form-inline">
        <button class="btn btn-outline-primary col-sm-6" id="previous" onclick="previous()">Previous</button>
        <button class="btn btn-outline-primary col-sm-6" id="next" onclick="next()">Next</button>
    </div>
    <br/>

    <form class="form-inline">
        <label class="lead mr-2 ml-2" for="month">Jump To: </label>
        <select class="form-control col-sm-4" name="month" id="month" onchange="jump()">
            <option value=0>Jan</option>
            <option value=1>Feb</option>
            <option value=2>Mar</option>
            <option value=3>Apr</option>
            <option value=4>May</option>
            <option value=5>Jun</option>
            <option value=6>Jul</option>
            <option value=7>Aug</option>
            <option value=8>Sep</option>
            <option value=9>Oct</option>
            <option value=10>Nov</option>
            <option value=11>Dec</option>
        </select>

        <label for="year"></label>
        <select class="form-control col-sm-4" name="year" id="year" onchange="jump()">
            <option value=2020>2020</option>
            <option value=2021>2021</option>
            <option value=2022>2022</option>
            <option value=2023>2023</option>
            <option value=2024>2024</option>
            <option value=2025>2025</option>
            <option value=2026>2026</option>
            <option value=2027>2027</option>
            <option value=2028>2028</option>
            <option value=2029>2029</option>
            <option value=2030>2030</option>
        </select>
    </form>

{%  endblock %}

{% block javascripts %}
    <script>
        habits = {{ results|json_encode|raw }};
        today = new Date();
        currentMonth = today.getMonth();
        currentYear = today.getFullYear();
        selectYear = $('#year'); //document.getElementById("year");
        selectMonth = $('#month'); //document.getElementById("month");
        dateObject = {};

        months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

        monthAndYear = $('#monthAndYear'); //document.getElementById("monthAndYear");

        $(() => {
            {#var habits = {{ results|json_encode|raw }}; //Don't use data = $('.js-user-rating').data('entryResults')#}
            var recurrences = {{ recurrenceResult|json_encode|raw }}
                console.log(habits);
            // console.log(habits[0].name);
            // console.log(recurrences[0][0].date);
            // console.log(recurrences);

            recurrences.forEach((item, idx) => { //Populates dateObject {'year':{'month': [date, date2 etc.]}}
                //idx corresponds with habit order
                if(!checkNested(dateObject, idx)){
                    dateObject[idx] = {};
                }
                var count = 0;
                item.forEach((date) =>{
                    var d = new Date(date.date);
                    // console.log(d);
                    // console.log(checkNested(dateObject, idx, d.getFullYear().toString(), d.getMonth().toString()));
                    if(!checkNested(dateObject, idx, d.getFullYear().toString())){
                        //Year does not exist so create dict
                        dateObject[idx][d.getFullYear().toString()] = {};
                    }
                    if(!checkNested(dateObject, idx, d.getFullYear().toString(), d.getMonth().toString())){
                        //Month does not exist so create array
                        // console.log("false");
                        // console.log(d.getMonth().toString());
                        dateObject[idx][d.getFullYear().toString()][d.getMonth().toString()] = [];
                    }
                    dateObject[idx][d.getFullYear().toString()][d.getMonth().toString()].push(d); //TODO! add the actual reccurence[0] or [1] so that when updating it's easier.
                    dateObject[idx][d.getFullYear().toString()][d.getMonth().toString()].push(count);
                    count++;
                    // console.log(dateObject);
                });
                // console.log(new Date(item))
            });

            // var date = new Date(recurrences[0][0].date);
            // console.log(date);
            showCalendar(currentMonth, currentYear);
            // console.log(date.getTime());
            // console.log(today.getTime());
            showHabits(currentMonth, currentYear);

            // var test = {level1:{level2:{level3:'level3'}} };
            //
            // console.log(checkNested(test, 'level1', 'level2', 'level3')); // true
            // console.log(checkNested(test, 'level1', 'level2', 'foo')); // false
        });

        function next() {
            currentYear = (currentMonth === 11) ? currentYear + 1 : currentYear;
            currentMonth = (currentMonth + 1) % 12;
            showCalendar(currentMonth, currentYear);
            showHabits(currentMonth, currentYear);
        }

        function previous() {
            currentYear = (currentMonth === 0) ? currentYear - 1 : currentYear;
            currentMonth = (currentMonth === 0) ? 11 : currentMonth - 1;
            showCalendar(currentMonth, currentYear)
            showHabits(currentMonth, currentYear);
        }

        function jump() {
            currentYear = parseInt(selectYear.value);
            currentMonth = parseInt(selectMonth.value);
            showCalendar(currentMonth, currentYear);
            showHabits(currentMonth, currentYear);
        }
        function showCalendar(month, year) {
            let numOfDays = daysInMonth(month, year);

            tbl = $('#mytableheader'); //  document.getElementById("calendar-body"); // body of the calendar]

            var prevDates = document.getElementById("mytableheader");   // Get the element with id="mytableheader"
            // prevDates.removeChild(prevDates.childNodes[0]);
            prevDates.innerText = "";

            $('#monthAndYear').text(months[month] + " " + year);

            selectYear.value = year;
            selectMonth.value = month;

            // creating all cells
            let date = 1;
            // for (let i = 0; i < numOfDays; i++) {
                // creates a table row
            let row = document.createElement("tr");

            cell = document.createElement("th");
            cellText = document.createTextNode("Habit");
            cell.appendChild(cellText);
            row.appendChild(cell);
            // console.log(numOfDays);
            //creating individual cells, filing them up with data.
            for (let j = 0; j < numOfDays; j++) {
                cell = document.createElement("th");
                cellText = document.createTextNode(date);
                if (date === today.getDate() && year === today.getFullYear() && month === today.getMonth()) {
                    cell.classList.add("bg-info");
                } // color today's date
                cell.appendChild(cellText);
                row.appendChild(cell);
                date++;
            }
            console.log(row);
            tbl.append(row); // appending each row into calendar body.
        }

        function showHabits(month, year){
            let numOfDays = daysInMonth(month, year);
            tbl = $('#mytablecontent');

            var prevHabits = document.getElementById("mytablecontent");   // Get the element with id="mytableheader"

            prevHabits.innerText = "";

            let row = document.createElement("tr");
            cell = document.createElement("td");
            console.log("dateObject is", dateObject);
            for (var key in dateObject) { //Loop through each habit
                if(!dateObject.hasOwnProperty(key)) continue;

                var obj = dateObject[key];
                console.log("specific dateObject is", dateObject[key]);
                // console.log(habits[key].name);
                cell = document.createElement("th");
                cellText = document.createTextNode(habits[key].name);

                cell.appendChild(cellText);
                cell.id = habits[key].id;
                cell.classList.add("nr");
                row.appendChild(cell);

                var dateExists = {};

                //Compare currentMonth currentYear with dateObject year date - if entries populate else don't.

                // console.log("object is", obj);

                if(checkNested(obj, currentYear, currentMonth)){ //Check if currentYear and currentMonth is a key
                    console.log(obj[currentYear][currentMonth]);

                    var counter = 0;
                    var currArray = obj[currentYear][currentMonth]
                    while(counter < currArray.length){
                        if(counter%2 == 1){
                            counter++;
                            continue;
                        }
                        dateExists[currArray[counter].getDate()] = currArray[counter+1];
                        counter++;
                    }

                    // var dateAndIndexToggle = 1
                    //
                    // obj[currentYear][currentMonth].forEach((date, idx) => {
                    //     if(dateAndIndexToggle%2 == 0){
                    //         continue;
                    //     }
                    //     dateExists[date.getDate()] = idx;
                    //     console.log("test test", date); //Works!
                    //     // cell = document.createElement("th");
                    //     // cellText = document.createTextNode(date.getDate().toString());
                    //     // cell.appendChild(cellText);
                    //     // row.appendChild(cell);
                    //     dateAndIndexToggle++;
                    // });
                    console.log(dateExists);
                    console.log(numOfDays);
                    console.log("habits[key].done", habits[key].done);
                    // console.log("test");
                    // for(var i = 0; i < numOfDays; i++){
                    //     console.log(i);
                    // }
                    for (let j = 0; j < numOfDays; j++) {
                        // console.log("test");
                        cell = document.createElement("td");
                        cellText = document.createTextNode("");
                        var btn = document.createElement('input');
                        btn.type = "button";
                        btn.className = "btn";
                        // btn.value = entry.email;
                        if (dateExists.hasOwnProperty(j+1)) {
                            btn.setAttribute("id", dateExists[j+1]);
                            if(habits[key].done[dateExists[j+1]]){
                                btn.value = "✅";
                                btn.className = "btn real true";
                                // cellText = document.createTextNode("✅");
                            }
                            else{
                                btn.value = "❌";
                                btn.className = "btn real false";
                                // cellText = document.createTextNode("❌");
                            }
                            // btn.setAttribute("id", dateExists[j]); //WHY TF DIS AINT WORKING?!?!?@
                            // cell.classList.add("bg-info");
                        } // color today's date
                        // else{
                        //     cell.classList.add("bg-secondary");
                        // }
                        // cell.appendChild(cellText);
                        cell.appendChild(btn);
                        row.appendChild(cell);
                        // console.log(row);
                    }

                }
                tbl.append(row);
                row = document.createElement("tr"); //Create new row
            }
            // tbl.append(row);

            //for each habit loop over see if a match in month, then populate X for dates - create row nonetheless
        }
        // check how many days in a month code from https://dzone.com/articles/determining-number-days-month
        function daysInMonth(iMonth, iYear) {
            return 32 - new Date(iYear, iMonth, 32).getDate();
        }

        function checkNested(obj, level,  ...rest) {
            if (obj === undefined) return false
            if (rest.length == 0 && obj.hasOwnProperty(level)) return true
            return checkNested(obj[level], ...rest)
        }

        function toggleHalfMonth() {
            return 0;
        };

        $(document).ready(function() {
            $('table').on('click', 'td', function(e) {
                if(!$(e.target).hasClass('real')){
                    return;
                }
                var row = $(this).closest("tr");
                var habitID = row.find(".nr").attr('id');
                var bool = 1;
                var recurrenceID = e.target.id;
                // if($(e.target).hasClass("real")){
                //     recurrenceID = e.target.id;
                // }
                if($(e.target).hasClass("true")){
                    bool = 0;
                }
                var recurrenceDate = this.cellIndex;

                console.log("HabitID is", habitID);
                console.log("recurrenceDate is", recurrenceDate);
                console.log("Bool is", bool);
                console.log("recurrenceID is", recurrenceID);

                $.ajax({
                    url:'{{ (path('post_tracker')) }}',
                    type: "POST",
                    dataType: "json",
                    data: {
                        "habit_id": habitID,
                        "recurrence_id": recurrenceID,
                        "bool": bool
                    },
                    async: true,
                    success: function (data)
                    {
                        if(bool){
                            e.target.value = "✅";
                            e.target.classList.remove("false");
                            e.target.classList.add("true");
                            //     btn.value = "✅";
                            // btn.className = "btn real true";
                        }
                        else{
                            e.target.value = "❌";
                            e.target.classList.remove("true");
                            e.target.classList.add("false");
                        }

                        console.log(data);
                        $('div#ajax-results').html(data.output);
                    }
                });

                // alert([$(day).text(), $(time).text()]);
            });
        });
            {#$('td').click(function(e) {#}
            {#    console.log("clicked!");#}
            {#    console.log(e);#}
            {#    console.log(e.target);#}
            {#    console.log(e.target.cellIndex);#}
            {#    var row = $(this).closest("tr");    // Find the row#}
            {#    var habitID = row.find(".nr").attr('id'); //Need HabitID, Recurrence date (int), true/false.#}
            {#    var bool = false;#}
            //     if($(this).hasClass("true")){
            //         bool = true;
            //     }

            {#    console.log(habitID);#}
            {#    console.log(row);#}
            {#    console.log(that);#}


            {#    console.log("bool is", bool);#}
            {#    // var bool = $(this).hasClass()#}
            {#    console.log("row index", row.cellIndex);#}
            {#    // console.log()#}
            {#    // var dateInt = //Must find way to get header?#}
            {#    // var bool = row.#}

            {#    var text = row.find(".nr").text();#}

                {#$.ajax({#}
                {#    url:'{{ (path('post_tracker')) }}',#}
                {#    type: "POST",#}
                {#    dataType: "json",#}
                {#    data: {#}
                {#        "some_var_name": "some_var_value"#}
                {#    },#}
                {#    async: true,#}
                {#    success: function (data)#}
                {#    {#}
                {#        console.log(data);#}
                {#        $('div#ajax-results').html(data.output);#}
                {#    }#}
                {#});#}
        //         return false;
        //     });
        // });
        // $(document).on('click', 'button.ajax', function(){
        //     console.log("clicked!");
            {#that = $(this);#}
            {#$.ajax({#}
            {#    url:'{{ (path('app_bundle_route')) }}',#}
            {#    type: "POST",#}
            {#    dataType: "json",#}
            {#    data: {#}
            {#        "some_var_name": "some_var_value"#}
            {#    },#}
            {#    async: true,#}
            {#    success: function (data)#}
            {#    {#}
            {#        console.log(data)#}
            {#        $('div#ajax-results').html(data.output);#}

            {#    }#}
            {#});#}
            {#return false;#}

        // });

    </script>
{% endblock %}
